(define (problem Food_Delivery_Problem)
  (:domain Food_Delivery_Domain)
  (:objects Customer1 Customer2 Customer3 Customer4 Customer5 - customer
            Restaurant1 Restaurant2 Restaurant3 - restaurant
            Bike1 BiCycle1 - transport
            p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13  - point)
  (:init 
  (= (total-cost) 0)
  
  (Customer-at Customer1 p1)
  (Customer-at Customer2 p5)
  (Customer-at Customer3 p7)
  (Customer-at Customer4 p10)
  (Customer-at Customer5 p12)
  
  
  (Restaurant-at Restaurant1 p3)
  (Restaurant-at Restaurant2 p6)
  (Restaurant-at Restaurant3 p13)
  
  (path p1 p2)
  (path p2 p1)
  (path p2 p3)
  (path p3 p2)
  (path p3 p4)
  (path p4 p3)
  (path p4 p5)
  (path p5 p4)
  (path p5 p6)
  (path p6 p5)
  (path p6 p7)
  (path p7 p6)
  (path p7 p8)
  (path p8 p7)
  (path p7 p13)
  (path p13 p7)
  (path p8 p13)
  (path p13 p8)
  (path p9 p13)
  (path p13 p9)
  (path p9 p3)
  (path p3 p9)
  (path p9 p10)
  (path p10 p9)
  (path p10 p11)
  (path p11 p10)
  (path p11 p1)
  (path p11 p1)
  (path p11 p12)
  (path p12 p11)
  (path p12 p13)
  (path p13 p12)
  
  (= (distance p1 p2) 12)
  (= (distance p2 p1) 12)
  (= (distance p2 p3) 5)
  (= (distance p3 p2) 5)
  (= (distance p3 p4) 7)
  (= (distance p4 p3) 7)
  (= (distance p4 p5) 11)
  (= (distance p5 p4) 11)
  (= (distance p5 p6) 3)
  (= (distance p6 p5) 3)
  (= (distance p6 p7) 8)
  (= (distance p7 p6) 8)
  (= (distance p7 p8) 2)
  (= (distance p8 p7) 2)
  (= (distance p7 p13) 10)
  (= (distance p13 p7) 10)
  (= (distance p8 p13) 7)
  (= (distance p13 p8) 7)
  (= (distance p9 p13) 4)
  (= (distance p13 p9) 4)
  (= (distance p9 p3) 6)
  (= (distance p3 p9) 6)
  (= (distance p9 p10) 1)
  (= (distance p10 p9) 1)
  (= (distance p10 p11) 8)
  (= (distance p11 p10) 8)
  (= (distance p11 p1) 7)
  (= (distance p1 p11) 7)
  (= (distance p11 p12) 4)
  (= (distance p12 p11) 4)
  (= (distance p12 p13) 9)
  (= (distance p13 p12) 9)
  
  (= (per_km_cost Bike1) 4)
  (= (per_km_cost BiCycle1) 2.5)
  
  
  (Transport-at Bike1 p2)
  (Transport-at BiCycle1 p8)
  
  (PreparingFoodFor Restaurant1 Customer1)
  (PreparingFoodFor Restaurant2 Customer2)
  (PreparingFoodFor Restaurant3 Customer3)
  (PreparingFoodFor Restaurant2 Customer4)
  (PreparingFoodFor Restaurant3 Customer5)
  
  
  (NotCarryingFood Bike1)
  (NotCarryingFood BiCycle1)
  
  )
  (:goal (and (ReceivedFood Customer1) (ReceivedFood Customer2) (ReceivedFood Customer3)(ReceivedFood Customer4) (ReceivedFood Customer5)))
  
  (:metric minimize (total-cost))
  )